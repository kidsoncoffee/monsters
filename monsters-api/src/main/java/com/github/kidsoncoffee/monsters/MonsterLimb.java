package com.github.kidsoncoffee.monsters;

import org.immutables.value.Value;

import java.util.List;

/**
 * The namespace for all <strong>Monster Limbs</strong> interfaces and domain.
 *
 * @author fernando.chovich
 * @since 1.0
 */
public interface MonsterLimb {

  /** A limb schema. */
  @Value.Immutable
  @Value.Style(typeImmutable = "ImmutableMonsterLimb*")
  interface Schema {

    /**
     * Returns the name of the limb.
     *
     * @return The name of the limb.
     */
    String getName();

    /**
     * Returns the type of the limb.
     *
     * @return The type of the limb.
     */
    Class getType();
  }

  /**
   * The <strong>Monster Limb</strong> default setup.
   *
   * @param <T> The type of the Monster.
   */
  @FunctionalInterface
  interface DefaultSetup<T> {

    /**
     * Provides a {@link ValueGeneratorBinding} and a <strong>Monster</strong> that together is used
     * to setup the default value generation.
     *
     * @param valueGeneratorBinding The value generator binding instance.
     * @param monster The generated monster instance.
     */
    void defaultSetup(final ValueGeneratorBinding valueGeneratorBinding, final T monster);
  }

  /** The value generator binding interface. */
  interface ValueGeneratorBinding {

    /**
     * Binds the returning setup to the <strong>Limb</strong> call.
     *
     * @param limbCall The limb call to bind the setup against.
     * @param <T> The type of the value to generate.
     * @return The setup to generate the <strong>Limb</strong> value.
     */
    <T> LimbValueGeneratorSetup<T> on(final T limbCall);
  }

  /**
   * Sets up how a value will be generated for a <strong>Limb</strong>.
   *
   * @param <T> The type of the <strong>Limb</strong>.
   */
  interface LimbValueGeneratorSetup<T> {

    /**
     * Sets a value generated by the given {@link ValueGenerator}.
     *
     * @param generator The value generator.
     */
    void generate(final ValueGenerator<T> generator);

    /**
     * Sets a fixed value to the <strong>Limb</strong>.
     *
     * @param value The value to be returned by the <strong>Limb</strong>.
     */
    void fix(final T value);

    /**
     * Sets a value from given list of choices.
     *
     * @param choices The list of possible choices to pick from.
     */
    void pickFrom(final List<T> choices);
  }

  /**
   * Generates a value for the <strong>Monster Limb</strong>.
   *
   * @param <T> The type of the value to generate.
   */
  @FunctionalInterface
  interface ValueGenerator<T> {

    /**
     * Generates a value.
     *
     * @return The generated value.
     */
    T generate();
  }
}
